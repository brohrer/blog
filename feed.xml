<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title>Brandon Rohrer</title>
<link>https://www.brandonrohrer.com</link>
<description>Brandon Rohrer's blog</description>
<atom:link href="http://brandonrohrer.com/feed.xml" rel="self" type="application/rss+xml" />
<language>en</language>

  <item>
    <title>
    Transformers from Scratch  2/ðŸ§µ
    </title>
    <link>
    https://www.brandonrohrer.com
    </link>
    <pubDate>
    Tue, 14 Aug 2025 20:01:00 EDT
    </pubDate>
    <guid>
    2025081405
    </guid>
    <description>
          <h3 id="dot_product">Dot product</h3>
        <p>
          One really useful thing about the one-hot representation is that
          it lets us compute
          <a href="https://en.wikipedia.org/wiki/Dot_product">dot products</a>.
          These are also known by other
          intimidating names like inner product and scalar product.
          To get the dot product of two vectors, multiply their
          corresponding elements, then add the results.
        </p>
        <p style="text-align:center;">
          <img title="Dot product illustration"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/dot_product.png"
            alt="Dot product illustration"
            style="height: 300px;">
        </p>
        <p>
          Dot products are especially useful when we're working with our
          one-hot word representations. The dot product of any one-hot
          vector with itself is one.
        </p>
        <p style="text-align:center;">
          <img title="Dot product of matching vectors"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/match.png"
            alt="Dot product of matching vectors"
            style="height: 300px;">
        </p>
        <p>
          And the dot product of any one-hot vector with any other one-hot
          vector is zero.
        </p>
        <p style="text-align:center;">
          <img title="Dot product of non-matching vectors"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/non_match.png"
            alt="Dot product of non-matching vectors"
            style="height: 300px;">
        </p>
        <p>
          The previous two examples show how dot products
          can be used to measure similarity. As another example,
          consider a vector of values that represents a combination of words
          with varying weights.
          A one-hot encoded word can be compared against it with the
          dot product
          to show how strongly that word is represented.
        </p>
        <p style="text-align:center;">
          <img title="Dot product gives the similarity between two vectors"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/similarity.png"
            alt="Dot product gives the similarity between two vectors"
            style="height: 300px;">
        </p>
    </description>
  </item>

  <item>
    <title>
    Transformers from Scratch  1/ðŸ§µ
    </title>
    <link>
    https://www.brandonrohrer.com
    </link>
    <pubDate>
    Tue, 13 Aug 2025 22:01:00 EDT
    </pubDate>
    <guid>
    2025081400
    </guid>
    <description>
<p>
Behind all the GPTs and Geminis and Claudes and Llamas are transformers. They were introduced as a tool for sequence transductionâ€”converting one sequence of symbols to anotherâ€”and are now used almost entirely for sequence completionâ€”given a starting prompt, carry on in the same vein and style.
</p>
<p>
Here is a deep dive into the nuts and bolts of what make them tick. This isn't a short journey, but I hope you'll be glad you came.
</p>

<h2>One-hot encoding</h2
<p>
In the beginning were the words. So very many words. Our first step is to convert all the words to numbers so we can do math on them.
</p>
<p>
Imagine that our goal is to create the computer that responds to our voice commands. Itâ€™s our job to build the transformer that converts (or transduces) a sequence of sounds to a sequence of words.
</p>
<p>
We start by choosing our vocabulary, the collection of symbols that we are going to be working with in each sequence. In our case, there will be two different sets of symbols, one for the input sequence to represent vocal sounds and one for the output sequence to represent words.
</p>
<p>
For now, let's assume we're working with English. There are tens of thousands of words in the English language, and perhaps another few thousand to cover computer-specific terminology. That would give us a vocabulary size that is the better part of a hundred thousand. One way to convert words to numbers is to start counting at one and assign each word its own number. Then a sequence of words can be represented as a list of numbers.
</p>
<p>
For example, consider a tiny language with a vocabulary size of three: files, find, and my. Each word could be swapped out for a number, perhaps files = 1, find = 2, and my = 3. Then the sentence "Find my files", consisting of the word sequence [ find, my, files ] could be represented instead as the sequence of numbers [2, 3, 1].
</p>
<p>
This is a perfectly valid way to convert symbols to numbers, but it turns out that there's another format that's even easier for computers to work with, one-hot encoding. In one-hot encoding a symbol is represented by an array of mostly zeros, the same length of the vocabulary, with only a single element having a value of one. Each element in the array corresponds to a separate symbol.
</p>
<p>

Another way to think about one-hot encoding is that each word still gets assigned its own number, but now that number is an index to an array. Here is our example above, in one-hot notation.
</p>
        <p style="text-align:center;">
          <img title="A one-hot encoded vocabulary"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/one_hot_vocabulary.png"
            alt="A one-hot encoded vocabulary"
            style="height: 300px;">
        </p>
        <p>
          So the sentence "Find my files" becomes a sequence of one-dimensional
          arrays,
          which, after you squeeze them together,
          starts to look like a two-dimensional array.
        </p>
        <p style="text-align:center;">
          <img title="A one-hot encoded sentence"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/one_hot_sentence.png"
            alt="A one-hot encoded sentence"
            style="height: 300px;">
        </p>

<p>
So the sentence "Find my files" becomes a sequence of one-dimensional arrays, which, after you squeeze them together, starts to look like a two-dimensional array.
</p>
<p>
Heads-up, I'll be using the terms "one-dimensional array" and "vector" interchangeably. Likewise with "two-dimensional array" and "matrix".
</p>
    </description>
  </item>

  <item>
    <title>
    Converting audio files between formats
    </title>
    <link>
    https://www.brandonrohrer.com
    </link>
    <pubDate>
    Tue, 12 Aug 2025 22:01:00 EDT
    </pubDate>
    <description>
    <guid>
    2025081401
    </guid>

<p>
Converting audio files from formats you can listen to, store, transmit,
and analyze can be migraine-inducing (at least for me) so here are
some shortcuts that work for getting all that done (at least for me).
</p>

<p>
<a href="https://github.com/brohrer/blog/blob/main/code/audio.py">Here is a runnable script</a>
demonstrating all the snippets below.
</p>

<h2><a id="Libraries"></a><a href="#Libraries">Libraries</a></h2>

<p>
There is a vibrant and confusing landscape of libraries and tools for
working with audio in Python.
</p>

<p>
One pair that has worked well for me is <code>soundfile</code> and <code>simpleaudio</code>.
They cover the tasks I need to do, and have licenses that allow me to use
them in code at work.
</p>

<p>
<a href="https://python-soundfile.readthedocs.io/">soundfile</a> is an open source
tool for manipulating audio files, released under the
<a href="https://en.wikipedia.org/wiki/BSD_licenses">BSD 3-clause license</a>.
The <a href="https://github.com/bastibe/python-soundfile">source code</a> is browsable.
</p>

<p>
<a href="https://simpleaudio.readthedocs.io/en/latest/index.html">simpleaudio</a> is an
<a href="https://en.wikipedia.org/wiki/MIT_License">MIT Licensed</a> cross-platform
library for playing turning audio files into phyiscal vibrations of the air.
</p>

<p>
<pre> import simpleaudio as sa
import soundfile as sf</pre>
</p>

<h2><a id="Read-an-.mp3-to-a-Numpy-array"></a><a href="#Read-an-.mp3-to-a-Numpy-array">Read an .mp3 to a Numpy array</a></h2>

<p>
<pre>audio_data, samplerate = sf.read(mp3_filename)</pre>
</p>

<h2><a id="Write-a-Numpy-array-to-an-.mp3-file."></a><a href="#Write-a-Numpy-array-to-an-.mp3-file.">Write a Numpy array to an .mp3 file.</a></h2>
    </description>
  </item>

  <item>
    <title>
    Images in posts experiment
    </title>
    <link>
    https://www.brandonrohrer.com
    </link>
    <pubDate>
    Tue, 12 Aug 2025 19:01:00 EDT
    </pubDate>
    <guid>
    2025081402
    </guid>
    <description>
    <p>
    What if the image isn't the first thing?
    </p>
    <img src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/sleeping_pup.JPG"/>
    <p>
    What if there are more than one image?
    </p>
    <img src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/course_314_thumbnail.png"/>
    </description>
  </item>

  <item>
    <title>
    Getting images in rss posts
    </title>
    <link>
    https://www.brandonrohrer.com
    </link>
    <pubDate>
    Tue, 12 Aug 2025 19:00:00 EDT
    </pubDate>
    <guid>
    2025081403
    </guid>
    <description>
    <img src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/course_314_thumbnail.png"/>
    <p>
    I think I finally figured out how to include image thumbnails with my
    RSS feed posts. Following the pattern in xkcd's feed.xml, the
    description tags contain html (no CDATA delimeters), and part of that is
    and img tag. I think that may be all it is.
    </p>
    </description>
  </item>

  <item>
    <title>
    Juggling repositories for website serving
    </title>
    <link>
    https://www.brandonrohrer.com
    </link>
    <pubDate>
    Tue, 12 Aug 2025 07:00:00 EDT
    </pubDate>
    <description>
    <img src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/boulderer.jpg"/>
    <p>
      For fun, I take something trivial, like my blog, and try to make it
      as robust to failure as possible. Among other things, I host it
      on three different git services, Github, GitLab, and Codeberg.
    </p>
    <p>
      As the repository supporting my blog has grown, mainly from collecting
      images, it got larger than the politely enforced 100MB limit of
      Codeberg. It also made it impossible to ignore that I was abusing
      git, using it to version control binaries that don't change often.
      I am using it as a file store, in addition to tracking changes in
      my html and css.
    </p>
    <p>
      To get around this, I broke my website repo out into two - one is
      a proper version control hosting the code, which I creatively named
      "blog". And the other is a blatant file store for images,
      named "blog_images". Although I'm still abusing it, separating it
      out is the first step toward moving to a proper file store.
      Now both repos are under the 100MB limit, and I can host them
      in triplicate if one service goes down or gets shut down for some
      reason, I can quickly migrate to another.
    </p>
    <p>
      I also made the deliberate decision to use GitHub as a content
      delivery network. All my image links go right to the raw
      images on GitHub now.
      I occasionally bump up against my free bandwidth
      limits at Netlify. By serving my images from GitHub, that bandwidth
      will go down to a tiny fraction of what it was.
      It's terrible ettiquette to use a git service as a CDN and I 
      would never do this Codeberg, a respectable small scale operation.
      But GitHub won't even see this as a rounding error at 6 decimal
      places, and plus...it's Microsoft.
    </p>
    <p>
      <a href="https://github.com/brohrer/blog">GitHub blog repo</a><br>
      <a href="https://gitlab.com/brohrer/blog">GitLab blog repo</a><br>
      <a href="https://codeberg.org/brohrer/blog">Codeberg blog repo</a>
    </p>
    </description>
  </item>

</channel>
</rss> 
